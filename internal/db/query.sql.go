// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
)

const addBot = `-- name: AddBot :one
INSERT INTO bots (
    token,
    studio_id,
    first_name,
    username
)
VALUES (
    $1,
    $2,
    $3,
    $4
)
ON CONFLICT (token) DO NOTHING
RETURNING id, studio_id, token, first_name, username, created_at
`

type AddBotParams struct {
	Token     string
	StudioID  int64
	FirstName string
	Username  string
}

func (q *Queries) AddBot(ctx context.Context, arg AddBotParams) (Bot, error) {
	row := q.db.QueryRowContext(ctx, addBot,
		arg.Token,
		arg.StudioID,
		arg.FirstName,
		arg.Username,
	)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.StudioID,
		&i.Token,
		&i.FirstName,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}

const getBotById = `-- name: GetBotById :one
SELECT id, studio_id, token, first_name, username, created_at
FROM bots
WHERE id = $1
`

func (q *Queries) GetBotById(ctx context.Context, id int64) (Bot, error) {
	row := q.db.QueryRowContext(ctx, getBotById, id)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.StudioID,
		&i.Token,
		&i.FirstName,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}

const getBotByToken = `-- name: GetBotByToken :one
SELECT id, studio_id, token, first_name, username, created_at
FROM bots
WHERE token = $1
`

func (q *Queries) GetBotByToken(ctx context.Context, token string) (Bot, error) {
	row := q.db.QueryRowContext(ctx, getBotByToken, token)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.StudioID,
		&i.Token,
		&i.FirstName,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}
